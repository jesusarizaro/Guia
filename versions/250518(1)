
import Vision
import CoreML
import AVFoundation
import SwiftUI


import MapKit
import CoreLocation
import Combine
import AVFoundation



struct ContentView: View {
    enum VistaActiva {
        case camara, destino, asistente, informacion
    }
    
    @State private var vistaActiva: VistaActiva = .asistente // 👈 Inicia en Asistente
    @State private var decirPies: String = ""
    @State private var giro: String = ""
    @State private var mostrarOpcionesDestino = false
    @State private var respuestaDeGuia: String = "" // 👈 Mensaje dinámico del asistente
    
    @State private var destinoExpandido = false
    @State private var destinoSeleccionado = "Destino"

    let destinosDisponibles = [
        "Destino", "Bloque A", "Bloque B", "Bloque C",
        "Bloque D", "Coliseo", "Biblioteca", "Administración", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "asdf", "hola",
    ]

    var body: some View {
        ZStack {
            // Vista principal dinámica
            Group {
                switch vistaActiva {
                case .camara:
                    CameraView()
                        .edgesIgnoringSafeArea(.all)
                default:
                    MapViewRepresentable()
                        .edgesIgnoringSafeArea(.all)
                }
            }
            
            /// recuadro de intrucciones
            if vistaActiva != .informacion {
                VStack {
                    VStack(spacing: 10) {
                        HStack {
                            if giro.contains("izquierda") {
                                Image(systemName: "arrow.turn.up.left")
                                    .foregroundColor(.white)
                            } else if giro.contains("derecha") {
                                Image(systemName: "arrow.turn.up.right")
                                    .foregroundColor(.white)
                            } else if giro.contains("adelante") {
                                Image(systemName: "arrow.up")
                                    .foregroundColor(.white)
                            } else {
                                Image(systemName: "arrow.2.circlepath")
                                    .foregroundColor(.white)
                            }

                            Text(giro.isEmpty ? "Instrucción de giro:" : giro)
                                .font(.body)
                                .foregroundColor(.black)
                                .padding(10)
                                .background(Color.yellow)
                                .cornerRadius(20)
                        }

                        HStack {
                            Image(systemName: "shoeprints.fill")
                                .foregroundColor(.white)

                            Text(decirPies.isEmpty ? "Distancia en pies hasta tu destino:" : decirPies)
                                .font(.body)
                                .foregroundColor(.black)
                                .padding(10)
                                .background(Color.yellow)
                                .cornerRadius(20)
                        }
                    }
                    .padding()
                    .background(Color.black)
                    .cornerRadius(35)
                    .shadow(radius: 5)
                    .padding(.top, 10) // ⬅️ Ajusta según altura del status bar
                    Spacer() // Esto empuja el bloque hacia arriba
                }
            }


            
            if vistaActiva == .destino {
                VStack {
                    Spacer()

                    ZStack(alignment: .bottomTrailing) {
                        VStack(alignment: .leading, spacing: 2) {
                            Text("Selecciona un destino:")
                                .font(.footnote)
                                .foregroundColor(.black)

                            if destinoExpandido {
                                // 🔽 Lista con scroll limitada a 300 px
                                ScrollView {
                                    VStack(alignment: .leading, spacing: 0) {
                                        ForEach(destinosDisponibles, id: \.self) { destino in
                                            Button(action: {
                                                destinoSeleccionado = destino
                                                destinoExpandido = false
                                            }) {
                                                Text(destino)
                                                    .font(.body)
                                                    .foregroundColor(.black)
                                                    .frame(maxWidth: .infinity, alignment: .leading)
                                                    .padding(.vertical, 8)
                                            }
                                            Rectangle()
                                                .frame(height: 1)
                                                .foregroundColor(.black.opacity(0.4))
                                        }
                                    }
                                }
                                .frame(height: 300)
                            } else {
                                Text(destinoSeleccionado)
                                    .font(.body)
                                    .fontWeight(.bold)
                                    .foregroundColor(.black)
                                    .fixedSize(horizontal: false, vertical: true)
                                    .lineLimit(nil)
                                    .frame(maxWidth: UIScreen.main.bounds.width * 0.65, alignment: .leading)
                            }
                        }
                        .padding(.horizontal, 20)
                        .padding(.top, 40)
                        .padding(.bottom, 160)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .background(Color.yellow)
                        .cornerRadius(60, corners: [.topLeft, .topRight])
                        .offset(y: 35)
                        .animation(.easeInOut(duration: 0.3), value: destinoExpandido)

                        // 🔁 Botón de flecha
                        Button(action: {
                            destinoExpandido.toggle()
                        }) {
                            Image(systemName: destinoExpandido ? "arrow.down" : "arrow.up")
                                .font(.system(size: 25))
                                .foregroundColor(.white)
                                .padding(20)
                                .background(Color.black)
                                .clipShape(Circle())
                                .shadow(radius: 6)
                        }
                        .padding(.trailing, 30)
                        .padding(.bottom, 110)
                    }
                }
            }

            
            
            // 🟡 Cuadro de asistente dinámico (solo si está activa la vista Asistente)
            if vistaActiva == .asistente {
                VStack {
                    Spacer()
                    // 🟡 Recuadro amarillo
                    ZStack(alignment: .bottomTrailing) {
                        VStack(alignment: .leading, spacing: 2) {
                            Text("Dile a Guía a dónde quieres ir:")
                                .font(.footnote)
                                .foregroundColor(.black)
                            
                            Text(respuestaDeGuia.isEmpty ? "Hola, soy Guía de Uninorte." : respuestaDeGuia)
                                .font(.body)
                                .fontWeight(.bold)
                                .foregroundColor(.black)
                                .fixedSize(horizontal: false, vertical: true)
                                .lineLimit(nil)
                                .frame(maxWidth: UIScreen.main.bounds.width * 0.60, alignment: .leading) // ⬅️ 3/4 del ancho
                        }
                        .padding(.horizontal, 20)
                        .padding(.top, 40)
                        .padding(.bottom, 160)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .background(Color.yellow)
                        .cornerRadius(60, corners: [.topLeft, .topRight])
                        .offset(y: 35)
                        .animation(.easeInOut(duration: 0.3), value: vistaActiva)
                    }
                }
                
                VStack {
                        Spacer()
                        HStack {
                            Spacer()
                            Button(action: {
                                // Acción pendiente
                            }) {
                                Image(systemName: "mic.fill")
                                    .font(.system(size: 25))
                                    .foregroundColor(.white)
                                    .padding(20)
                                    .background(Color.black)
                                    .clipShape(Circle())
                                    .shadow(radius: 6)
                            }
                            .padding(.trailing, 30)   // 🔘 Igual que en tu imagen
                            .padding(.bottom, 110)    // 🔘 Ajustado para flotar justo encima de la barra y el recuadro
                    }
                }
            }




            // 📖 Información
            if vistaActiva == .informacion {
                VStack {
                    ScrollView {
                        Text("Acerca de Guía\n\nEsta aplicación está diseñada para ayudarte a navegar usando instrucciones por voz y visión. Puedes usar la cámara para detectar obstáculos, seleccionar destinos o escribirlos directamente en el asistente. ¡Disfruta la experiencia!")
                            .padding()
                            .foregroundColor(.black)
                    }
                    .frame(maxHeight: 400)
                    .background(Color.yellow)
                    .cornerRadius(25)
                    .padding()
                    
                    Spacer()
                }
            }

            // 🔻 Barra inferior con botones
            VStack {
                Spacer()
                ZStack {
                    Color.black.ignoresSafeArea(edges: .bottom)
                    
                    HStack(spacing: 50) {
                        Button(action: {
                            vistaActiva = .camara
                        }) {
                            VStack(spacing: 3) {
                                Image(systemName: "camera.fill")
                                    .font(.system(size: 25))
                                Text("Cámara").font(.caption2)
                            }
                            .foregroundColor(.white)
                        }

                        Button(action: {
                            vistaActiva = .destino
                        }) {
                            VStack(spacing: 3) {
                                Image(systemName: "map.fill")
                                    .font(.system(size: 25))
                                Text("Destinos").font(.caption2)
                            }
                            .foregroundColor(.white)
                        }

                        Button(action: {
                            vistaActiva = .asistente
                        }) {
                            VStack(spacing: 3) {
                                Image(systemName: "person.wave.2.fill")
                                    .font(.system(size: 25))
                                Text("Asistente").font(.caption2)
                            }
                            .foregroundColor(.white)
                        }

                        Button(action: {
                            vistaActiva = .informacion
                        }) {
                            VStack(spacing: 3) {
                                Image(systemName: "info.circle.fill")
                                    .font(.system(size: 25))
                                Text("Info").font(.caption2)
                            }
                            .foregroundColor(.white)
                        }
                    }
                    .padding(.vertical, 12)
                    .frame(maxWidth: 350)
                }
                .frame(height: 90)
            }
        }
    }
}
















struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: CGSize(width: radius, height: radius)
        )
        return Path(path.cgPath)
    }
}

extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

























struct MapViewRepresentable: UIViewRepresentable {
    func makeUIView(context: Context) -> MKMapView {
        let mapView = MKMapView()
        mapView.showsUserLocation = true
        mapView.mapType = .satellite
        return mapView
    }

    func updateUIView(_ uiView: MKMapView, context: Context) {}
}





//MARK: - CAMARA
struct CameraView: UIViewControllerRepresentable {
    func makeUIViewController(context: Context) -> CameraViewController {
        return CameraViewController()
    }

    func updateUIViewController(_ uiViewController: CameraViewController, context: Context) {}

    class CameraViewController: UIViewController, AVCaptureVideoDataOutputSampleBufferDelegate {
        var captureSession: AVCaptureSession!
        var previewLayer: AVCaptureVideoPreviewLayer!
        let speechSynthesizer = AVSpeechSynthesizer()
        var lastSpokenLabel: String?

        
        
        /// Dice SOLAMENTE estas etiquetas
        let etiquetasPermitidas: Set<String> = ["person", "car", "chair", "cat", "dog"]

        /// Traduce del inglés al español las etiquetas
        let traducciones: [String: String] = [
            "person": "persona",
            "car": "carro",
            "chair": "silla",
            "cat": "gato",
            "dog": "perro"
        ]

        /// Indica el género de la palabra en español
        let generos: [String: String] = [
            "persona": "f", // femenino
            "carro": "m",   // masculino
            "silla": "f",
            "gato": "m",
            "perro": "m"
        ]
        
        override func viewDidLoad() {
            super.viewDidLoad()
            setupCamera()
        }

        func setupCamera() {
            captureSession = AVCaptureSession()
            captureSession.sessionPreset = .high
            
            guard let camera = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back) else {
                print("No se pudo acceder a la cámara")
                return
            }

            do {
                let input = try AVCaptureDeviceInput(device: camera)
                if captureSession.canAddInput(input) {
                    captureSession.addInput(input)
                }
                
                let output = AVCaptureVideoDataOutput()
                output.setSampleBufferDelegate(self, queue: DispatchQueue(label: "videoQueue"))
                if captureSession.canAddOutput(output) {
                    captureSession.addOutput(output)
                }
                
                previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
                previewLayer.videoGravity = .resizeAspectFill
                previewLayer.frame = view.layer.bounds
                view.layer.addSublayer(previewLayer)

                DispatchQueue.global(qos: .background).async {
                    self.captureSession.startRunning()
                }
                
            } catch {
                print("Error al configurar la cámara: \(error)")
            }
        }

        func captureOutput(_ output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection) {
            guard let pixelBuffer = CMSampleBufferGetImageBuffer(sampleBuffer) else { return }
            
            DispatchQueue.global(qos: .userInitiated).async {
                let observations = ObjectDetector.shared.detectObjects(pixelBuffer: pixelBuffer)
                DispatchQueue.main.async {
                    self.drawBoundingBoxes(for: observations)
                    self.announceDetectedObjects(observations)
                }
            }
        }

        func drawBoundingBoxes(for observations: [VNRecognizedObjectObservation]) {
            DispatchQueue.main.async {
                self.view.layer.sublayers?.removeSubrange(1...)
            }
            
            for observation in observations {
                guard let label = observation.labels.first?.identifier,
                      etiquetasPermitidas.contains(label) else { continue }

                let boundingBox = observation.boundingBox
                
                let frame = CGRect(
                    x: boundingBox.origin.x * self.view.frame.width,
                    y: (1 - boundingBox.origin.y - boundingBox.height) * self.view.frame.height,
                    width: boundingBox.width * self.view.frame.width,
                    height: boundingBox.height * self.view.frame.height
                )

                let boxLayer = CALayer()
                boxLayer.frame = frame
                boxLayer.borderColor = UIColor.red.cgColor
                boxLayer.borderWidth = 2.0

                let textLayer = CATextLayer()
                let etiquetaTraducida = traducciones[label] ?? label
                textLayer.string = etiquetaTraducida.capitalized
                textLayer.foregroundColor = UIColor.white.cgColor
                textLayer.fontSize = 14
                textLayer.frame = CGRect(x: frame.origin.x, y: frame.origin.y - 20, width: frame.width, height: 20)
                textLayer.backgroundColor = UIColor.black.withAlphaComponent(0.7).cgColor
                textLayer.alignmentMode = .center

                DispatchQueue.main.async {
                    self.view.layer.addSublayer(boxLayer)
                    self.view.layer.addSublayer(textLayer)
                }
            }
        }

        
        ///Anuncia los objetos detectados en español
        func announceDetectedObjects(_ observations: [VNRecognizedObjectObservation]) {
            // Si no hay ninguna etiqueta permitida en la imagen, no decimos nada
            guard let observation = observations.first(where: { etiquetasPermitidas.contains($0.labels.first?.identifier ?? "") }) else {
                lastSpokenLabel = nil
                return
            }

            let originalLabel = observation.labels.first?.identifier ?? "Desconocido"
            
            guard etiquetasPermitidas.contains(originalLabel) else { return }

            let translatedLabel = traducciones[originalLabel] ?? originalLabel
            let genero = generos[translatedLabel] ?? "m"
            let articulo = (genero == "f") ? "una" : "un"

            let mensaje = "Tienes \(articulo) \(translatedLabel) al frente"

            // 👉 Siempre que haya un box, se va a decir en voz alta, sin importar si es repetido
            let utterance = AVSpeechUtterance(string: mensaje)
            utterance.voice = AVSpeechSynthesisVoice(language: "es-US")
            utterance.rate = 0.5

            // Detenemos lo anterior si sigue hablando (opcional, puedes comentar esta línea si prefieres que se sobrepongan)
            if speechSynthesizer.isSpeaking {
                speechSynthesizer.stopSpeaking(at: .immediate)
            }

            speechSynthesizer.speak(utterance)
            lastSpokenLabel = translatedLabel
        }

    }
}



//MARK: - YOLO
class ObjectDetector {
    static let shared = ObjectDetector()
    private var model: VNCoreMLModel?

    private init() {
        guard let mlModel = try? YOLOv3(configuration: .init()).model,
              let visionModel = try? VNCoreMLModel(for: mlModel) else {
            print("Error al cargar el modelo ML")
            return
        }
        self.model = visionModel
    }
    
    /// Dice SOLAMENTE estas etiquetas
    let etiquetasPermitidas: Set<String> = ["person", "car", "chair", "cat", "dog"]

    /// Traduce del inglés al español las etiquetas
    let traducciones: [String: String] = [
        "person": "persona",
        "car": "carro",
        "chair": "silla",
        "cat": "gato",
        "dog": "perro"
    ]

    /// Indica el género de la palabra en español
    let generos: [String: String] = [
        "persona": "f", // femenino
        "carro": "m",   // masculino
        "silla": "f",
        "gato": "m",
        "perro": "m"
    ]
    
    func detectObjects(pixelBuffer: CVPixelBuffer) -> [VNRecognizedObjectObservation] {
        guard let model = self.model else { return [] }
        
        let request = VNCoreMLRequest(model: model)
        let handler = VNImageRequestHandler(cvPixelBuffer: pixelBuffer, options: [:])
        
        do {
            try handler.perform([request])
            let results = request.results as? [VNRecognizedObjectObservation] ?? []

            /// Solo devuelve resultados filtrados por etiquetasPermitidas
            let filteredResults = results.filter { result in
                guard let label = result.labels.first?.identifier else { return false }
                return etiquetasPermitidas.contains(label)
            }

            return filteredResults
        } catch {
            print("Error al procesar la imagen: \(error)")
            return []
        }
    }
}
